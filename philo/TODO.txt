
//Plantear comportamiento y join de los threads
//gestionar si el numero de comidas es 0 
//la gestion del tiempo debe ser un contador de tiempo que vaya incrementandose junto con el paso de la aplicaciÃ³n 

//deberia gestionar el limite de long long? cuanto es este valor?
// hay uqe revisar la liberacion de free de la memoria

create forks devuelve error si es false
en caso de que fallo un malloc debo controlar la liberacion de todos los forks
//creacion de los mutex


Philosopher

Para comer es necesario tener dos tenedores n -1 y n + 1

comiendo -> !pensar !dormir
pensando -> !dormir !comer
durmiendo -> !comer !pensar

Comer -> liberar tenedores -> Dormir -> Piensa -> Comer

Los filosofos cogen los tenedores segun sean zurdos o diestros, es decir, 

ID % 2  == 0 (par) es diestro
ID (impar) zurdo

esta solucion es valida siempre y cuando los filosofos sean pares la solucion que se propone es darle 
un delay a los filosofos impares de forma que cojan los tenedores entre [1-2] milisengundos posteriores 

time_to_think : no se especifica en ningun momento 
se usa para que los filosofos no coman antes de tiempo 
formula recomendada:

time_to_think = (time_to_die - (get_time() - philo->next_meal) - time_to_eat) / 2;

Monitor.c 

manager encargado de revisar el estado general de los filosofos. debe ir 
comprobando cuando todos los filosofos han comido o cuando uno de ellos haya muerto
de manera que es el encargado de parar la simulacion. ningun otro hilo puede pararlo  



Proteger mallocs
